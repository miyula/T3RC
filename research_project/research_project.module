<?php

/**
 * Implements hook_menu()
 */
function research_project_menu(){
    //admin tools part
    $menu['admin/content/researchtools'] = array(
	'title' => t('Research Tools'),
        'description' => t('List research tools'),
        'page callback' => 'list_research_tools_callback',
        'access arguments' => array('Edit research tools'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'research.admin.inc',
    );
    $menu['admin/content/researchtools/list'] = array(
	'title' => t('List tools'),
        'description' => t('List research tools'),
        'page callback' => 'list_research_tools_callback',
        'access arguments' => array('Edit research tools'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'research.admin.inc',
	'weight' => -1,
    );
    $menu['admin/content/researchtools/add'] = array(
	'title' => t('Add new tool'),
        'description' => t('Add a new research tool'),
        'page callback' => 'add_research_tools_callback',
        'access arguments' => array('Edit research tools'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'research.admin.inc',
    );
    $menu['admin/content/researchtools/edit/%'] = array(
	'title' => t('Edit Research Tool'),
        'description' => t('Eidt seleted research tool'),
        'page callback' => 'edit_research_tools_callback',
	'page arguments' => array(4),
        'access arguments' => array('Edit research tools'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'research.admin.inc',
    );
    $menu['admin/content/researchtools/delete/%'] = array(
	'title' => t('Delete Research Tool'),
        'description' => t('Delete seleted research tool'),
        'page callback' => 'delete_research_tools_callback',
	'page arguments' => array(4),
        'access arguments' => array('Edit research tools'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'research.admin.inc',
    );
    
    //sub pages for research page
    
    //for admin tools
    $menu['researchpage/tools/window/%'] = array(
	'title' => t('Select research tools'),
        'description' => t('Select research tools for the research project.'),
        'page callback' => 'select_research_tools_window',
	'page arguments' => array(3),
        'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    $menu['researchpage/tools/changed/%'] = array(
	'title' => t('Save tools changed'),
	'description' => t('Ajax for saving selected tools changed.'),
	'page callback' => 'ajax_save_researchpage_tool_changed',
	'page arguments' => array(3),
	'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    $menu['researchpage/tools/refresh/%'] = array(
	'title' => t('Refresh tool list'),
	'description' => t('Ajax for refresh tool list.'),
	'page callback' => 'ajax_refresh_tool_list',
	'page arguments' => array(3),
	'access callback' => '_current_user_access_view_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    
    //for admin researchers
    $menu['researchpage/researcher/window/%'] = array(
	'title' => t('Add new researcher'),
        'description' => t('Invite new researcher to the project.'),
        'page callback' => 'add_researcher_window',
	'page arguments' => array(3),
        'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    $menu['researchpage/researcher/checkemail/%'] = array(
	'title' => t('Check researcher email'),
	'description' => t('Return the result if this account can be invited to this project'),
	'page callback' => 'check_invited_researcher_email',
	'page arguments' => array(3),
	'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    $menu['researchpage/researcher/invitenew/%'] = array(
	'title' => t('Invite new researcher'),
	'description' => t('Invite new researcher into the project'),
	'page callback' => 'ajax_invite_new_researcher',
	'page arguments' => array(3),
	'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    $menu['researchpage/researcher/refresh/%'] = array(
	'title' => t('Refresh researcher list'),
	'description' => t('Return researcher list the project'),
	'page callback' => 'ajax_refresh_researcher_list',
	'page arguments' => array(3),
	'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    
    //For inviting people
    $menu['researchpage/participants/page/%'] = array(
	'title' => t('Invite new people'),
        'description' => t('Invite new people to participate the project.'),
        'page callback' => 'invite_participants_page',
	'page arguments' => array(3),
        'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    
    //Participants page
    $menu['researchpage/participants/list/%'] = array(
	'title' => t('Participants'),
        'description' => t('List all participants on this project'),
        'page callback' => 'list_participants_page',
	'page arguments' => array(3),
        'access callback' => '_current_user_access_edit_research_page',
	'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'research.pages.inc',
    );
    
    //Research Tools
    $menu['research/tools/%'] =array(
	'title arguments' => array(2),
	'title callback' => 'fetch_research_tool_name',
	'description' => t('Display the detail of the given research tool'),
	'page callback' => 'display_research_tool_page',
	'page arguments' => array(2),
	'access arguments' => array("access content"),
	'type' => MENU_CALLBACK,
    );
    
    //user profile pages
    $menu['user/profiles/%user'] = array(
	'title arguments' => array(2,'user'),
	'title callback' => 'fetch_user_profiles_title',
	'description' => t('Display user profiles page'),
	'page callback' => 'display_user_profiles_page',
	'page arguments' => array(2,'user'),
	'access callback' => 'user_is_logged_in',
	'type' => MENU_CALLBACK,
	'file' => 'profile.pages.inc',
    );
    $menu['user/profiles/%user/edit'] = array(
	'title' => t('Edit profiles'),
	'description' => t('Edit user profiles'),
	'page callback' => 'edit_user_profiles_page',
	'page arguments' => array(2,'user'),
	'access callback' => 'user_edit_access',
	'access arguments' => array(2,'user'),
	'type' => MENU_CALLBACK,
	'file' => 'profile.pages.inc',
    );
    
    
    return $menu;
}

/**
 * Title callback for user/profiles/%
 */
function fetch_user_profiles_title($user){
    //get username
    if(_access_view_detail_user_info($user->uid)){
	load_user_profiles($user);
	if(!empty($user->profiles->firstname)||!empty($user->profiles->lastname)){
	    $real = " ({$user->profiles->firstname}, {$user->profiles->lastname})";
	}
	return $user->name.$real;
    }else{
	return $user->name;
    }
    
}


/**
 * Implementation of hook_perm().
 */
function research_project_perm(){
    return array(
	"Edit research tools", //access to admin research tools page, add, edit, and delete research tools
	"Create research page",
	"Edit any research page",
	"Delete any research page",
	"Send SMS message",
	"Send email",
    );
}


/** 
 * Implements hook_access()
 */
function research_project_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('Create research page', $account);
    case 'update':
      return _access_edit_research_page($node,$account);
    case 'delete':
      return (user_access('Delete any research page', $account))||(_access_edit_research_page($node,$account));
    case "view":
      return TRUE;
  }
}

/**
 * Check the account has permission to see user profile
 * Who has the permission:
 *   - User's own profile
 *   - Reseachers in user's participated project
 *   - Staffs in the same project
 */
function access_view_user_profiles($uid){
    global $user;
    
    if($user->uid==$uid){
	return TRUE;
    }
    
    if(!array_search("researchers", $user->roles)){
	return FALSE;
    }
    
    $researcher_check = "SELECT COUNT(r.id) FROM {project_researchers} AS r, {project_persons} AS p "
                       ."WHERE p.uid=%d AND p.pid=r.pid AND p.uid=%d";
    if(db_result(db_query($researcher_check,$uid,$user->uid))>0){
	return TRUE;
    }		       
    
    $staff_check = "SELECT COUNT(r1.id) FROM {project_researchers} AS r1, {project_researchers} AS r2 "
                  ."WHERE r2.uid=%d AND r1=%d AND r2.pid=r1.pid AND r2.uid<>r1.uid";
    if(db_result(db_query($staff_check,$uid,$user->uid))>0){
	return TRUE;
    }
    
    return FALSE;
}

/**
 * Check the account has permission to edit research page or not
 * Who has the permission:
 *   - Owner who creates the research page
 *   - Researchers who in the research list
 */
function _access_edit_research_page($node,$account){
    if(user_access('Edit any research page', $account)){
	return TRUE;
    }
    
    if($node->uid==$account->uid){
	return TRUE;
    }
    
    //check researcher in researcher list
    //  status: 0, normal, 1, locked, 4 removed
    $check_sql = "SELECT pr.id FROM {project_researchers} AS pr, {research_project_page} AS rp "
		."WHERE rp.nid=%d AND pr.pid=rp.id AND pr.uid=%d AND pr.status=0";
    if(db_result(db_query($check_sql, $node->nid, $account->uid))){	
	return TRUE;
    }
    
    return FALSE;
}


/**
 * Check current user has permission to view whole user profiles
 * Who has the permission:
 *   - user himself
 *   - the researcher in the project him joined
 */
function _access_view_detail_user_info($uid){
    //get current user
    global $user;
    if($user->uid==$uid){
	return TRUE;
    }
    $sql = "SELECT COUNT(p.id) FROM {project_persons} AS p, {project_researchers} AS r "
          ."WHERE p.uid=%d AND p.pid=r.pid AND r.status=0 AND r.uid=%d ";
    if(db_result(db_query($sql,$uid,$user->uid))>0){
	return TRUE;
    }
    return FALSE;
}

/**
 * Check if current user has permission to edit research page
 */
function _current_user_access_edit_research_page($pid){
    //get nid and uid of the project page
    $sql = "SELECT r.nid nid, n.uid uid FROM {research_project_page} AS r, {node} AS n WHERE r.id=%d AND r.nid=n.nid";
    if($res=db_fetch_object(db_query($sql,$pid))){
	global $user;
	return _access_edit_research_page($res,$user);
    }
    return FALSE;
}

/**
 *
 */
function _current_user_access_view_research_page($pid){
    //TODO
    global $user;
    
    //check activity
    if(!user_access("access content")&&$user->status!=1){
	return FALSE;
    }
    
    //check if user in researcher list
    
    //check if the current page is open
    
    return TRUE;
}

/**
 * Check the account has permission to delete research page or not
 * Who has the permission:
 *   - Owner who create the research page
 */
function _access_delete_research_page($node,$account){
    if($node->uid==$account->uid){
	return TRUE;
    }
    
    return FALSE;
}

/**
 * Title callback for research/tools/%
 * Get tool name
 */
function fetch_research_tool_name($tool_id){
    //get tool info
    $sql = "SELECT name from {research_tool} WHERE id=%d";
    if($tool = db_fetch_object(db_query($sql,$tool_id))){
        return "Tool - {$tool->name}";
    }else{
        $content="No such tool";
        return $content;
    }
}

/**
 * Menu callback for research/tools/%
 */
function display_research_tool_page($tool_id){
    drupal_add_css(drupal_get_path('module', 'research_project') .'/research_project.css');
    //get tool info
    $sql = "SELECT id, name, description, guidance, download, logo from {research_tool} WHERE id=%d";
    if($tool = db_fetch_object(db_query($sql,$tool_id))){
	//check user permission
	if(user_access("Edit research tools")){
	    $tool->edit_permission = TRUE;
	    $tool->edit_link = l('[Edit]',"admin/content/researchtools/edit/{$tool->id}");
	}else{
	    $tool->edit_permission = FALSE;
	}
        return theme('research_tool_page', $tool);
    }else{
        $content="<p><font color='red'>No tool info can be found.</font></p>";
        return $content;
    }
}


/**
 * Implements hook_node_info()
 */
function research_project_node_info(){
    return array(
        'researchproject' => array(
            'name' => t('Research Project'),
            'module' => 'research_project',
            'descritption' => t('For researcher to create project page.'),
            'has_title' => TRUE,
            'title_label' => t('Project Name'),
            'has_body' => TRUE,
            'body_label' => t('Project description'),
        )
    );
}

/**
  * Implementation of hook_form().
  */
function research_project_form(&$node){
    
    $type = node_get_types('type', $node);
    if ($type->has_title) {
	$form['title'] = array(
	    '#type' => 'textfield',
	    '#title' => check_plain($type->title_label),
	    '#required' => TRUE,
	    '#default_value' => $node->title,
            '#description' => t('The name of project'),
	    '#weight' => -20,
	);
    }
    if($type->has_body){
        $form['body'] = array(
	    '#type' => 'textarea',
	    '#title' => check_plain($type->body_label),
	    '#required' => TRUE,
	    '#default_value' => $node->body,
            '#cols' => 60,
            '#rows' => 5,
            '#description' => t('Description for this project. This will be shown in project page.'),
	    '#weight' => 0,
	);
    }
    
    //select research tools
    $form['tools'] = array(
	'#value' => '<p>To be implemented later...</p>',
    );
    
    //select the way inviting persons to join in the project
    //  0. open (everyone can join, on project page)
    //  1. only invited (only invited person)
    //  2. only by invitation code (only who has invaitation code)
    $invitation_options = array(
	0 => 'Open - everyone can join the project from project page.',
	1 => 'Researcher invite people',
	2 => 'Join by input invitation code',
    );
    $form['invitation'] = array(
	'#type' => 'radios',
	'#title' => 'Invitation way',
	'#options' => $invitation_options,
	'#description' => t('Choose the way how people can join into the project.'),
	'#required' => TRUE,
	'#default_value' => isset($node->invitation)?$node->invitation:0,
    );
    
    //set project current status
    //  0. prepairing   1. starting  2.closed, 4. deleted
    $status_options = array(
	0 => 'Prepairing - only researchers can visit project page.',
	1 => 'Open - persen can visit project page and join the project.',
	2 => 'Closed - persen can visit project page but join project closed.',
    );
    $form['pstatus'] = array(
	'#type' => 'radios',
	'#title' => 'Project current status',
	'#options' => $status_options,
	'#description' => t(''),
	'#required' => TRUE,
	'#default_value' => isset($node->pstatus)?$node->pstatus:0,
    );
    
    return $form;
}

/**
 * Validate research_project form.
 */
function research_project_validate($form, &$form_state){
    
}

/**
 * implements hook_insert().
 */
function research_project_insert($node){
    $sql = "INSERT INTO {research_project_page} "
          ."(nid, project_code, invitation_way, status, created, changed) "
	  ."VALUES(%d, '%s', %d, %d, now(), now())";
    $project_code = "p".str_pad($node->nid,6,"0",STR_PAD_LEFT);
    db_query($sql,$node->nid,$project_code,$node->invitation,$node->pstatus);
    $sql2 = "SELECT id FROM {research_project_page} WHERE nid=%d";
    $id=db_result(db_query($sql2,$node->nid));
    $sql2 = "INSERT INTO {project_researchers}"
           ."(uid, pid, created, changed, introductor, status, weight) "
	   ."VALUES(%d, %d, now(), now(), 'Project creater', 0, -1)";
    db_query($sql3, $node->uid,$id);
}

/**
 * Implements hook_update().
 */
function research_project_update($node){
    $sql = "UPDATE {research_project_page} SET invitation_way=%d, status=%d, changed=now() WHERE nid=%d";
    db_query($sql,$node->invitation,$node->pstatus,$node->nid);
}

/**
 * Implements hook_delete().
 */
function research_project_delete($node){
   // change the state of project, not real deleted
   $sql = "UPDATE {research_project_page} SET status=4, changed=now() WHERE nid=%d";
   db_query($sql,$node->nid);
   
   //TODO handle researcher, person and tools info
}

/**
 * Implementation of hook_load().
 */
function research_project_load($node){
    //get project page info
    $page_sql = "SELECT id, project_code, invitation_way, status FROM {research_project_page} WHERE nid=%d";
    $result = db_query($page_sql, $node->nid);
    if($result){
	$page = db_fetch_object($result);
	$node->pid = $page->id;
	$node->project_code = $page->project_code;
	$node->invitation = $page->invitation_way;
	$node->pstatus = $page->status;
    }
    return $node;
}

/**
 * Implementation of hook_view().
 */
function research_project_view($node, $teaser = FALSE, $page = FALSE) {
    $path = drupal_get_path('module', 'research_project');
    drupal_add_css($path.'/research_project.css');
    
    $node = node_prepare($node, $teaser); // get it ready for display
    
    //check current user permission
    global $user;
    $node->edit_permission = _access_edit_research_page($node, $user);
    if($node->edit_permission){
	drupal_add_css($path.'/jquery/jquery-ui.css');
	//add setting Drupal.settings.research_project.tool_window
	drupal_add_js(array('research_project' => array('tool_window' => url("researchpage/tools/window/"))), 'setting');
	//add setting Drupal.settings.research_project.tool_changed
	drupal_add_js(array('research_project' => array('tool_changed' => url("researchpage/tools/changed/"))), 'setting');
	//add setting Drupal.settings.research_project.tool_refresh
	drupal_add_js(array('research_project' => array('tool_refresh' => url("researchpage/tools/refresh/"))), 'setting');
	//add setting Drupal.settings.research_project.research_window
	drupal_add_js(array('research_project' => array('research_window' => url("researchpage/researcher/window/"))), 'setting');
	//add setting Drupal.settings.research_project.research_email_check
	drupal_add_js(array('research_project' => array('research_email_check' => url("researchpage/researcher/checkemail/"))), 'setting');
	//add setting Drupal.settings.research_project.research_invite_new
	drupal_add_js(array('research_project' => array('research_invite_new' => url("researchpage/researcher/invitenew/"))), 'setting');
	//add setting Drupal.settings.research_project.research_refresh
	drupal_add_js(array('research_project' => array('research_refresh' => url("researchpage/researcher/refresh/"))), 'setting');
    
	drupal_add_js($path.'/jquery/jquery-ui.min.js');
	drupal_add_js($path.'/research_project.js');
    }
    
    //get tools list
    $tool_sql = "SELECT t.id id, t.name name, t.logo logo "
               ."FROM {project_tools} AS p, {research_tool} AS t "
               ."WHERE p.pid=%d AND t.id=p.tid";
    $res1 = db_query($tool_sql,$node->pid);
    $tool_list = array();
    while($tool = db_fetch_array($res1)){
	$tool_list[] = $tool;
    }
    $node->tool_list = $tool_list;
    
    //get project page owner
    
    //get researcher list 
    $researcher_sql = "SELECT r.uid uid, introduction, u.name name "
                     ."FROM {project_researchers} AS r, {users} AS u "
                     ."WHERE r.pid=%d AND u.uid=r.uid "
		     ."ORDER BY r.weight";
    $res2 = db_query($researcher_sql,$node->pid);
    $researcher_list = array();
    while($researcher = db_fetch_array($res2)){
	$researcher_list[] = $researcher;
    }
    $node->researcher_list = $researcher_list;
    
    //get partipatents
    $persons_count = "SELECT COUNT(id) FROM {project_persons} WHERE pid=%d";
    if($count = db_result(db_query($persons_count,$node->pid))){
	$node->partipatent_count = $count;
    }
    $get_first_five_person = "SELECT p.uid uid, p.status status "
                            ."FROM {project_persons} AS p, {users} AS u "
			    ."WHERE p.pid=%d AND u.uid=p.uid "
			    ."ORDER BY p.created DESC "
			    ."";
    
    // Add theme stuff here
    $node->content['research_project_page'] = array(
	    '#value' => theme('research_project_page', $node),
	    '#weight' => 1,
    );
    return $node;
}

/**
 * Implements hook_theme().
 */
function research_project_theme() {
    return array(
	'research_project_page' => array(
	    'template' => 'research_project_page',
	    'arguments' => array(
		'node' => NULL,
		'module_path' => str_replace("?q=","",url(drupal_get_path('module','research_project'))),
	    ),
	),
	'research_tool_page' => array(
	    'template' => 'research_tool_page',
	    'arguments' => array(
		'tool' => NULL,
		'module_path' => str_replace("?q=","",url(drupal_get_path('module','research_project'))),
	    ),
	),
	'project_user_profile_page' => array(
	    'template' => 'project_user_profile_page',
	    'arguments' => array(
		'person' => NULL,
		'module_path' => str_replace("?q=","",url(drupal_get_path('module','research_project'))),
	    ),
	),
    );
}


/**
 * Implements hook_user().
 */
function research_project_user($op, &$edit, &$user){
    if ($op == 'view') {
	//redirect to user/profiles/%
	drupal_goto("user/profiles/{$user->uid}");
	//print_r($user->content);
    }
}

/**
 * load user profiles information to user object
 * @param
 *  &$user
 *    object, user
 */
function load_user_profiles(&$user){
    $sql = "SELECT phone, firstname, lastname, photo, ((YEAR(CURDATE())-YEAR(birthday))-(RIGHT(CURDATE(),5)<RIGHT(DATE(birthday),5))) age, YEAR(birthday) byear, MONTH(birthday) bmonth, DAY(birthday) bday, gender FROM {person_profiles} WHERE uid=%d";
    if($profile=db_fetch_object(db_query($sql,$user->uid))){
        $user->profiles = $profile;        
    }
}

/**
 * Splite the mail list into array from mail content
 *
 * @param
 *   $mail_content
 *      string
 * @param
 *   $split
 *      string
 * @return
 *   Array
 */
function splite_mail_list($mail_content,$split){
    $mail_list = array();
    $mail_token = strtok($mail_content,$split);
    while($mail_token!==false){
        $email = trim($mail_token);
        if(!empty($email)&&valid_email_address($email)){
            $mail_list[] = $email;
        }
        $mail_token = strtok($split);
    }
    return $mail_list;
}

/**
 * Generate invitation template
 * @param
 *  $type
 *     string, type of template, email/sms
 * @param
 *  $pid
 *     int, project id
 */
function generate_invitation_template($type,$pid){
    //get project info
    $sql = "SELECT title from {node} AS n, {research_project_page} AS r "
          ."WHERE r.id=%d AND r.nid=n.nid";
    if($project=db_fetch_object(db_query($sql,$pid))){
	$name = $project->title;
    }
    $link = "http://".$_SERVER['HTTP_HOST'].url("node/$pid");
    if($type=="email"){
	$content.= "<p>Hi,</p>";
	$content.= "<p>You are invited to join project $name. Visit $link to get more detials.</p>";
	$content.= "<P>Your login account is your email address, first login password is @password.<P>";
	$content.= "<p>Kind regards,</p>";
	$content.= "<p>$name</p>";
    }else if($type="sms"){
	$content.= "You are invited to join project $name. You can visit $link to get more details.Your login account is your phone number, first login password is @password.";
    }
    
    
    return $content;
}

/**
 * get user by email, if no user found, generate new one
 * @param
 *  $email
 *    String, email address
 * @return
 *  user object
 */
function get_user_by_mail($mail,$project){
    $get_user_sql = "SELECT uid, name, mail, pass FROM {users} WHERE LOWER(mail) = LOWER('%s')";
    $user = db_fetch_object(db_query($get_user_sql, $mail));
    
    $role = 'Person';
    //new user
    if($user==FALSE){
	
	$sql = "SELECT rid FROM {role} WHERE name='%s'";
	$id = db_result(db_query($sql,$role));
	$roles[$id] = $role;
        $default_pass = genRandomString(6);   
	$user_info = array(
            'name' => $mail,
            'mail' => $mail,
            'pass' => $default_pass,
	    'roles' => $roles,
            'status' => 1,
        );
             
        $user = user_save($account,$user_info);        
	watchdog('New user', 'A new user(@mail) has been added by project @project', array('@mail' => $mail,'@project' => $project), WATCHDOG_INFO);   
	$user->new_user = TRUE;
	$user->pass = $default_pass;
    }else{
	//If person not in user's roles, add it
	$sql = "SELECT rid FROM {role} WHERE name='%s'";
	$id = db_result(db_query($sql,$role));
	$check = "SELECT COUNT(uid) FROM {users_roles} WHERE uid=%d AND rid=%d";
	if(db_result(db_query($check,$user->uid,$id))==0){
	    $insert = "INSERT into {users_roles}(uid,rid) VALUES(%d,%d)";
	    db_query($insert,$user->uid,$id);   
	}
    }
    return $user;
}


/**
 * Send project invite email
 *
 * @param
 *   $mail_list
 *      array, list of email address
 * @param
 *   $idproject
 *      int, research project id
 * @param
 *   $project_name
 *      string
 */
function send_project_invite_mails($mail_list,$idproject,$project_name=""){
    
    foreach($mail_list as $mail){
        
        //step 1: get user by email address
        $get_user_sql = "SELECT uid, name, mail, pass FROM {users} WHERE LOWER(mail) = LOWER('%s')";
        $user = db_fetch_object(db_query($get_user_sql, $mail));
        if($user){
            //check if user already in person table
            $get_person_sql = "SELECT COUNT(*) FROM {person} WHERE uid = %d";
            $person = db_result(db_query($get_person_sql,$user->uid));
            if($person==0){
                //generate new person
                $person_sql = "INSERT INTO {person}(uid,username,email,password) VALUES(%d,'%s','%s','%s')";
                db_query($person_sql,$user->uid,$user->name,$user->mail,$user->pass);
                watchdog('New person', 'A new person(@mail) has been added by project @project', array('@mail' => $mail,'@project' => $project_name), WATCHDOG_INFO);
            }
	    //add Person role to user
	    $user = user_load($user->uid);
	    $roles = $user->roles;
	    $role = 'Person';
	    if(!array_search($role,$roles)){
		//If person not in user's roles, add it
		$sql = "SELECT rid FROM {role} WHERE name='%s'";
		$id = db_result(db_query($sql,$role));
		$insert = "INSERT into {users_roles}(uid,rid) VALUES(%d,%d)";
		db_query($insert,$user->uid,$id);
	    }
        }else{
            $new_user = TRUE;
            //generate new user	    
            $default_pass = "111111";
	    
	    $role = 'Person';
	    $sql = "SELECT rid FROM {role} WHERE name='%s'";
	    $id = db_result(db_query($sql,$role));
	    $roles[$id] = $role;
            
	    $user_info = array(
                'name' => $mail,
                'mail' => $mail,
                'pass' => $default_pass,
		'roles' => $roles,
                'status' => 1,
            );
             
            $user = user_save($account,$user_info);
            //generate new person
            $person_sql = "INSERT INTO {person}(uid,username,email,password) VALUES(%d,'%s','%s','%s')";
            db_query($person_sql,$user->uid,$user->name,$user->mail,$user->pass);
            watchdog('New user', 'A new user(@mail) has been added by project @project', array('@mail' => $mail,'@project' => $project_name), WATCHDOG_INFO);
        }        
        
        //step 2: check if use has already linked with project
        $check_projectCode = "SELECT COUNT(*) FROM {project_code} WHERE idperson=%d AND idproject=%d";
        $check_projectCode_result = db_result(db_query($check_projectCode,$user->uid,$idproject));
        if($check_projectCode_result>0){
            continue;
        }
        
        //step 3: link user with project
        $create_projectCode_sql = "INSERT INTO {project_code}(idperson,idproject) VALUES(%d,%d)"; 
        db_query($create_projectCode_sql,$user->uid,$idproject);        
        
        //step 4: generate project code
        $get_projectcode_id = "SELECT idprojectcode FROM {project_code} WHERE idperson=%d AND idproject=%d";
        $projectcode_id = db_result(db_query($get_projectcode_id,$user->uid,$idproject));
        if($projectcode_id>0){
	    //projectCode start from 1000001
            $projectCode = 100000+$projectcode_id;
            $set_projectCode = "UPDATE {project_code} SET project_code='%s' WHERE idprojectcode=%d";
            db_query($set_projectCode,$projectCode,$projectcode_id);
            watchdog('New project code', 'A new project code (@projectcode) has been added to link @user with project @project', array('@projectcode' => $projectCode,'@user'=>$user->name,'@project' => $project_name), WATCHDOG_INFO);
            
            //TODO:setp 5: send invitation mail
            /*$message['id'] = "side_research_project_invitation_mail";
            $message['to'] = $mail;
            $message['subject'] = "@project invites you to join their research";
            $message['body'] = "Hi @user,<br/>"
                            ."You are invited to join @project, @link <br/>"
                            ."<br/>"
                            ."Your invited project code:@code<br/>"
                            ."Visit @side_link, login to change your password.<br/>"
                            ."Username: @mail"
                            ."Password: @pass";
            $message['headers']['from'] = "miyula1988@gmail.com"; */
	    $mail_body.= '<html><head>'
			.'<meta http-equiv="Content-Language" content="zh-cn">'
			.'<meta http-equiv="Content-Type" content="text/html; charset=GB2312"></head>'
			.'<body>';
            if($new_user){
                $mail_body.= "<p>Hi @user,</p>"
                            ."<p>You are invited to join @project, !link</p> "
                            ."<p>Your invited project code:@code</p>"
                            ."<p>Visit !side_link, login to change your password.</p> "
                            ."<p>Username: @mail</p> "
                            ."<p>Password: @pass</p> ";
            }else{
                $mail_body.= "<p>Hi @user,</p>"
                            ."<p>You are invited to join @project, !link </p>"
                            ."<p>Your invited project code: @code</p>";
            }
	    $mail_body.= "</body><html>";
            $project_link = "http://".$_SERVER['HTTP_HOST'].url("node/".$idproject);
            $side_link = "http://".$_SERVER['HTTP_HOST'].url("user/login");
	    
	    $subject = t('@project invites you to join their research',array("@project"=>$project_name));
	    $body = t($mail_body,
                        array(
                            '@user'=>$user->name,
                            '@project'=>$project_name,
                            '!link'=>$project_link,
                            '!side_link'=>$side_link,
                            '@mail' => $user->name,
                            '@pass' => $default_pass,
                            '@code' => $projectCode,
                        )
		    );
	    side_send_http_mail($mail,$subject,$body);
            /*$message = array(
                'to' => $mail,
                'subject' => t('@project invites you to join their research',array("@project"=>$project_name)),
                'body' => t($mail_body,
                            array(
                                '@user'=>$user->name,
                                '@project'=>$project_name,
                                '!link'=>$project_link,
                                '!side_link'=>$side_link,
                                '@mail' => $user->name,
                                '@pass' => $default_pass,
                                '@code' => $projectCode,
                            )
                        ),
                'headers' => array('From' => 'miyula1988@gmail.com'),
                'from' => 'miyula1988@gmail.com',
            );
            if(drupal_mail_send($message)){
                watchdog('Send mail',"Success to send invitation mail to @mail", array('@mail'=>$mail),WATCHDOG_INFO);
            }else{
                watchdog('Send mail',"Failed to send invitation mail to @mail", array('@mail'=>$mail),WATCHDOG_WARNING);
            }*/
        }else{
            //TODO: notice error to researcher
            watchdog('ERROR', 'Failed to generate project for @user in project @project', array('@user'=>$user->name,'@project' => $project_name), WATCHDOG_ERROR);
        }
        
        
        
    }
}

/**
 * Send HTTP mail to person
 */
function side_send_http_mail($to_mail,$subject,$body){
    require_once(drupal_get_path('module','phpmailer').'/phpmailer/class.phpmailer.php');
    $mail = new PHPMailer(true);
    try {
	$mail->IsSMTP();
	$mail->SMTPDebug = 2;
	$mail->Host = variable_get("smtp_host",""); 
	$mail->SMTPAuth = true;           // turn on SMTP authentication  
	$mail->Port = variable_get("smtp_port","465");
	$mail->SMTPSecure = variable_get("smtp_protocol","ssl"); 
	$mail->Username = variable_get("smtp_username","");     // SMTP username
	$mail->Password = variable_get("smtp_password","");         // SMTP password  

	$mail->From = variable_get("smtp_username","");        
	$mail->FromName = "Side Project Team";    
    
	$mail->CharSet = "UTF8";              
	$mail->Encoding = "base64";  

	$mail->AddAddress($to_mail,"");    
	$mail->IsHTML(true);    // send as HTML  
   
	$mail->Subject = $subject;
    
	$mail->Body = $body;
	$mail->AltBody ="text/html";
	$mail->Send();
	drupal_set_message("Successed to send mail to $to_mail","status");
    } catch (phpmailerException $e) {
	drupal_set_message("Failed to send mail to $to_mail. ".$e->errorMessage(),"error");
    } catch (Exception $e) {
	drupal_set_message("Failed to send mail to $to_mail. ".$e->getMessage(),"error");
    }
}

/**
 * Generate Random String
 * Code from http://www.ccvita.com/25.html
 */
function genRandomString($len) 
{ 
    $chars = array( 
        "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",  
        "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",  
        "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G",  
        "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",  
        "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2",  
        "3", "4", "5", "6", "7", "8", "9" 
    ); 
    $charsLen = count($chars) - 1; 
 
    shuffle($chars); 
     
    $output = ""; 
    for ($i=0; $i<$len; $i++) 
    { 
        $output .= $chars[mt_rand(0, $charsLen)]; 
    } 
 
    return $output; 
 
} 